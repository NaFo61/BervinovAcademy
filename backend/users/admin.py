from django.contrib import admin, messages
from django.contrib.auth import get_user_model, update_session_auth_hash
from django.contrib.auth.forms import AdminPasswordChangeForm
from django.shortcuts import redirect, render
from django.urls import path, reverse
from django.utils.translation import gettext_lazy as _
from unfold.admin import ModelAdmin
from unfold.forms import UserChangeForm, UserCreationForm

User = get_user_model()


@admin.register(User)
class CustomUserAdmin(ModelAdmin):
    """–ö—Ä–∞—Å–∏–≤–∞—è –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""

    form = UserChangeForm
    add_form = UserCreationForm

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    list_display = (
        "email",
        "phone",
        "first_name",
        "last_name",
        "role",
        "is_active",
    )
    list_filter = ("role", "is_active")
    search_fields = ("email", "phone", "first_name", "last_name")
    ordering = ("-date_joined",)

    # –ü–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fieldsets = (
        (_("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), {"fields": ("email", "phone", "password")}),
        (
            _("–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
            {"fields": ("first_name", "last_name", "avatar", "bio")},
        ),
        (
            _("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"),
            {
                "fields": (
                    "role",
                    "is_active",
                    "is_staff",
                    "is_superuser",
                    "groups",
                    "user_permissions",
                )
            },
        ),
        (
            _("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
            {
                "fields": ("last_login", "date_joined"),
            },
        ),
    )

    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_fieldsets = (
        (
            None,
            {
                "classes": ("wide",),
                "fields": (
                    "email",
                    "phone",
                    "first_name",
                    "last_name",
                    "password1",
                    "password2",
                    "role",
                ),
            },
        ),
    )

    readonly_fields = ("last_login", "date_joined")

    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–Ω–∞—á–æ–∫ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é Unfold
    icon = "person"

    # =============================
    #   –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è üîê
    # =============================

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                "<id>/password/",
                self.admin_site.admin_view(self.user_change_password),
                name="user_change_password",
            ),
        ]
        return custom_urls + urls

    def formfield_for_dbfield(self, db_field, **kwargs):
        formfield = super().formfield_for_dbfield(db_field, **kwargs)
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É "Raw passwords are not stored..."
        if db_field.name == "password":
            formfield.help_text = ""
            formfield.label = _("–ü–∞—Ä–æ–ª—å")
        return formfield

    def user_change_password(self, request, id, form_url=""):
        user = self.get_object(request, id)
        if not user:
            messages.error(request, _("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return redirect("..")

        if request.method == "POST":
            form = AdminPasswordChangeForm(user, request.POST)
            if form.is_valid():
                form.save()
                update_session_auth_hash(request, user)
                messages.success(request, _("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ"))
                return redirect(
                    reverse("admin:users_user_changelist")
                )  # ‚úÖ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            else:
                messages.error(request, _("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è."))
        else:
            form = AdminPasswordChangeForm(user)

        context = {
            **self.admin_site.each_context(request),
            "title": _("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"),
            "form": form,
            "user": user,
        }
        return render(request, "admin/auth/user/change_password.html", context)

    class Media:
        css = {"all": ("css/base.css",)}
